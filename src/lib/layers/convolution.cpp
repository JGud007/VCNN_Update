#include "layers.h"
#include "../util.h"
#include "../../custom/custom.h"


float conv_filter_weight[20*1*5*5] = {-0.289963, 0.340464, -0.305472, -0.232902, 0.303319, -0.166423, 0.142875, 0.319069, 0.127545, -0.270484, 0.330772, -0.095975, -0.120283, -0.166906, 0.087265, -0.291956, 0.016528, 0.155171, -0.117953, 0.171534, -0.140353, 0.232892, 0.039761, -0.14058, -0.319815, 0.269924, -0.216631, -0.014121, -0.088709, 0.080464, 0.195869, 0.151508, 0.095873, 0.170289, -0.203816, 0.233274, -0.105816, -0.300225, 0.070854, 0.120807, -0.162813, 0.134775, -0.324706, -0.194356, -0.338329, -0.267472, -0.120585, 0.252848, 0.228621, -0.231181, -0.053382, 0.149955, -0.34382, 0.039224, 0.225491, 0.032225, 0.127032, -0.198598, 0.07711, -0.063138, 0.343897, -0.130058, -0.210556, -0.140015, 0.076978, 0.069108, 0.041086, -0.115699, 0.2925, 0.179982, 0.116044, 0.092861, -0.352644, 0.027192, -0.164461, 0.0588, 0.166802, 0.245261, -0.145461, 0.259301, -0.155665, 0.044831, -0.34202, -0.010989, -0.225439, 0.083235, 0.163496, 0.052718, 0.019351, 0.283956, 0.023824, 0.308586, 0.099374, -0.160657, 0.037249, 0.247467, -0.26443, -0.019726, -0.383156, -0.339156, -0.152504, 0.137703, 0.255984, -0.108257, 0.268197, -0.009884, 0.02522, 0.354451, 0.176841, -0.086293, 0.055533, 0.207239, 0.006203, 0.116343, 0.257195, -0.330477, -0.110613, -0.290977, -0.297486, -0.125002, 0.228131, -0.114782, -0.228862, 0.037183, 0.045762, 0.340062, -0.134026, -0.024905, 0.111331, -0.116243, 0.141376, 0.268133, 0.099798, 0.257133, 0.077071, 0.01868, -0.102842, 0.126291, 0.244557, 0.185712, -0.091535, -0.074656, -0.264331, -0.28931, -0.329835, 0.141214, 0.323121, -0.26029, -0.038461, 0.154569, 0.244492, 0.127543, 0.2169, 0.229628, -0.211436, -0.336972, 0.200767, -0.100406, 0.154253, 0.07065, 0.236001, 0.353189, 0.142031, 0.124889, 0.050083, 0.003829, 0.139963, -0.207205, 0.295026, -0.29324, -0.222954, 0.25756, 0.26796, -0.265002, -0.004973, 0.252647, -0.12735, -0.309067, 0.301126, -0.185211, 0.330553, -0.008051, -0.271138, -0.249204, -0.311074, -0.230558, 0.036684, -0.312979, -0.353684, 0.096022, 0.057956, -0.315755, -0.157945, -0.24264, 0.264057, -0.131703, 0.225082, -0.186517, -0.21383, -0.138639, -0.316254, -0.181107, 0.011898, -0.238575, -0.128485, -0.205553, -0.194777, -0.289389, -0.249834, -0.20279, -0.072087, -0.181557, 0.029624, -0.326042, 0.026457, -0.263257, -0.151021, 0.260048, -0.303584, -0.284908, -0.262215, -0.06832, 0.161077, 0.35751, 0.310976, -0.150721, 0.106782, -0.142969, 0.017861, 0.057901, 0.114808, -0.253712, 0.003969, 0.066522, 0.342812, -0.326145, 0.283697, -0.278376, -0.03088, -0.244944, -0.243031, 0.114747, -0.131661, 0.119457, -0.172943, -0.062809, 0.105911, -0.081676, -0.30716, 0.199757, -0.31271, -0.161797, -0.087536, -0.260126, 0.338344, 0.218812, -0.305612, 0.032852, -0.097323, -0.044639, 0.125189, -0.0555, 0.005784, -0.294625, -0.349293, 0.012547, -0.246012, -0.146457, -0.30217, -0.337505, 0.193464, -0.074283, 0.319533, -0.021149, 0.220593, 0.284801, 0.198809, -0.018633, 0.082546, 0.070577, -0.033835, -0.106388, -0.213968, 0.165061, -0.01216, -0.169424, -0.253525, 0.139873, -0.324303, 0.024608, -0.202838, 0.264745, 0.137378, -0.257835, 0.034085, -0.302135, 0.149641, 0.206817, 0.212615, -0.003899, -0.126857, 0.084032, 0.355591, 0.199429, -0.157279, 0.152613, -0.042768, 0.076552, -0.273128, 0.071372, 0.129225, -0.232586, -0.113946, 0.126465, -0.098425, -0.298035, -0.302797, 0.041684, 0.200707, 0.349963, -0.249174, -0.1348, -0.216363, -0.022656, 0.030934, 0.225524, -0.216811, -0.159323, 0.120011, -0.287764, 0.276572, -0.136724, -0.120429, 0.275099, -0.095409, 0.092839, -0.127332, 0.286225, 0.098653, 0.094593, 0.221262, 0.236433, -0.259535, 0.171072, -0.21217, 0.189473, -0.012417, -0.007268, -0.30355, 0.315689, -0.090231, -0.020732, 0.041217, -0.03914, 0.113329, 0.303486, 0.004938, -0.063949, 0.12461, 0.248534, 0.327387, 0.048071, 0.255668, 0.379219, 0.175326, -0.134876, 0.022527, -0.210763, -0.029131, 0.291044, -0.371467, 0.032908, 0.080027, -0.128271, -0.157839, -0.032151, 0.134545, -0.007555, 0.296264, -0.008749, 0.03554, -0.298644, 0.058046, 0.187427, 0.228614, -0.224413, -0.089345, 0.117928, 0.21777, 0.055589, 0.305374, -0.295981, -0.347132, 0.257127, 0.252316, -0.017885, -0.045539, -0.05121, -0.147734, -0.214323, 0.080478, -0.046156, -0.273658, -0.167207, -0.074869, -0.244249, 0.070343, 0.236456, -0.18613, -0.034149, 0.024219, 0.280135, -0.157275, -0.253766, -0.260948, 0.282568, 0.360052, -0.057684, -0.001112, -0.309751, 0.194591, -0.255332, -0.322653, -0.187361, -0.229264, -0.316719, -0.226814, -0.316301, 0.171481, -0.253039, -0.235642, -0.135389, -0.297195, 0.297902, -0.309003, -0.305, -0.293705, -0.24269, 0.317161, 0.221841, 0.139178, 0.353487, -0.04374, 0.275727, 0.23575, 0.11245, -0.089805, 0.301648, 0.110526, -0.028161, -0.101205, 0.048382, -0.327359, 0.002446, -0.339359, -0.004414, 0.022939, 0.186994, -0.091195, -0.272325, -0.276227, 0.086337, -0.282628, -0.131086, 0.274691, 0.11259, 0.005189, 0.09759, 0.204729, 0.00216, 0.167639, 0.232387, 0.12533, -0.208658, -0.069672, 0.203536, -0.101156, -0.265752, -0.19615, -0.367651, 0.189521, -0.203772, 0.295462, -0.016128, -0.025578, 0.029474, 0.341373, 0.037629, 0.12376, -0.197476, -0.046631, 0.03638, 0.309527, 0.284389, 0.226192, 0.318661, -0.14311, -0.333351, -0.156701, -0.130258}; //conv_filter_weight
float conv_bias[20] = {0.039575, 0.132373, 0.080684, 0.054492, -0.146521, -0.198408, -0.240175, 0.229098, 0.406952, 0.090276, 0.087948, -0.018699, 0.042285, -0.016742, -0.113048, 0.035974, 0.160076, 0.196278, 0.161832, -0.122964}; //conv_bias

inline float conv3d(Layer current, int fn, int ksize, int channels, int h, int w){
	float r = 0;
	int offset = int(ksize/2);
	int karea = ksize*ksize;
	for (int c = 0; c<channels; c++)
		for (int i = -offset; i < offset+1; i++)
			for (int j = -offset; j<offset+1; j++)
			{
				//float kernel_v = *(kernel + c*(karea) + (offset+i)*ksize + (offset+j));
				float kernel_v = conv_filter_weight[c*(karea) + (offset+i)*ksize + (offset+j) + fn];
				float image_v = GET_INPUT_DATA(current, c, h+i, w+j);
				r+= kernel_v * image_v;
			}

	return r;
}



void Convolution(Layer current, Layer next){
	int ksize = current.conv_filter_size;
	int fnum = current.conv_filter_num;
	int stride = current.conv_stride;
	int pad = current.conv_pad;
	int channels = current.input_channel_num;
	int offset_idx = int(ksize/2) - pad;
	int height = current.input_feature_map_height-offset_idx;
	int width = current.input_feature_map_width-offset_idx;
	int filterSize = ksize*ksize*channels;
	//float bias = conv_bias;
	//float kernel = conv_filter_weight;

//	printf("======================================\n");


	for (int fn = 0; fn < fnum; fn++){
			for(int h = offset_idx, hc = 0; h < height; h+=stride, hc++)
				for(int w = offset_idx, wc = 0; w < width; w+=stride, wc++){
					//the conv is like in volume
					float temp = conv3d(current, fn*filterSize, ksize, channels, h, w); //need change here
//					if(fn == 0){
//						printf("filter<%d,%d,%d> = conv3d + bias = %f + %f = %f \n",fn, hc,wc,temp,*(bias + fn),temp+*(bias + fn));
//					}
					//GET_INPUT_DATA(next,fn,hc,wc) = temp+*(bias + fn)
					GET_INPUT_DATA(next,fn,hc,wc) = temp+conv_bias[fn];
				}
	}
}
